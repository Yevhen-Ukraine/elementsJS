'use strict';

// const btns = document.querySelectorAll('button');

// Т.к. у нас там лежит псевдомассив то делаем следующим образом

//console.log(btns[0].classList.length); /* Если мы напишем вот так btns.classList то такое работать не будет потому что у псевдомассива такого свойства нет. В таком виде в консоли получим 2, т.е. у данной кнопки есть два класса */
/* Но чаще применяються методы, которые есть у classList. Рассмотрим некоторые из них. */

//console.log(btns[0].classList.item(1)); /* получим второй класс кнопки some */

// console.log(btns[1].classList.add('red')); /* Получаем возможность динамически менять классы */

//console.log(btns[0].classList.remove('blue')); /* Удаляем ненужный класс */

//console.log(btns[0].classList.toggle('blue')); /* Позволяет при отсутствии класса добавить его, а при наличии удалить */

/* Наличие класса можно использовать в условиях, т.к если мы будем использовать item то не факт что класс находиться именно на этой позиции, указанной в скобках item(1) */

// if (btns[1].classList.contains('red')) {
//     console.log('red');
// }
// Этот метод (contains) позволяет определять наличие класса и возвращает булиновое значение
/* Этот механизм открывает двери в динамическое преобразование страницы */

/* Пример использования это кнопка гамбургера */

// btns[1].addEventListener('click', () => {
//     // if (!btns[1].classList.contains('red')) {
//     //     btns[1].classList.add('red');
//     // } else {
//     //     btns[1].classList.remove('red');
//     // }
//     // Вместо этой конструкции можно использовать метод toggle, но в сложных скриптах, когда мы задаем такое поведение это не всегда доступно. Иногда нужно вручную провеверить есть ли какой-нибуть класс.
//     btns[1].classList.toggle('red');
// });

/* Также используються метод className */
// console.log(btns[0].className); // Но в этом случае мы получим список классов в форме строки и теперь чтобы манипулировать классами необходимо постоянно менять эту строчку каким либо методом. Это крайне неудобно.

                /* Дилигирование событий */

const btns = document.querySelectorAll('button'),
      wrapper = document.querySelector('.btn-block');

btns[0].addEventListener('click', () => {
    btns[1].classList.toggle('red');
});

// Назначаем обработчик событий, передаем обьект события (event), он содержит в себе всю информацию о том элементе где происходит событие.
wrapper.addEventListener('click', (event) => {
    // console.dir(event.target); // dir для того чтобы увидеть в качестве обьекта. При клике на кнопку в консоли получим button, в свойствах которого есть свойство tagName: "BUTTON". Чтобы удостовериться что пользователь попал менно в кнопку убедимся в наличии этого свойсва у event.target
    if (event.target && event.target.tagName == "BUTTON") {
        console.log('Hello');
    } // Первый event.target прописан по причине того что в html структуре не все элементы поддерживают события клика, поэтому у них не будет события event.target Чтобы избежать всевозможных ошибок сначала проверяем на существование event.target, далее используем оператор 'и' "&&"
});

/* Это является классическим примером дилигирования */
/* Еще пример */
wrapper.addEventListener('click', (event) => {
    if (event.target && event.target.classList.contains('blue')) {
        console.log('Hi');
    }
});


/* Создаем пример динамического контента на странице */

const btn = document.createElement('button'); // добавим кномку
btn.classList.add('red'); // Добавим класс чтобы увидеть эту кнопку, у нас в css прописаны стили заблаговременно
wrapper.append(btn); // Метод помещает кнопку в обертку wrapper

/* ВАЖНО */
/* В случае использования обычного перебора вместо дилигирования
Например: */

// btns.forEach(btn => {
//     btn.addEventListener('click', () => {
//         console.log('Hello');
//     });
// });
/* ничего происходить не будет, т.к. кнопка ничего не знает про обработчик события, который был добавлен еще до того как появилась кнопка */

/* У event.target есть и другие методы, например: */
/* matches("button.red") - сравнивает на предмет совпадения с указанным в метода тегом button который имеет класс red */